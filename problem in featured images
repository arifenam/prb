import openai
import base64
import requests
import shutil
from PIL import Image
from pyunsplash import PyUnsplash
from bing_image_downloader import downloader
from pexels_api import API
import json
import os
from random import choice


#Authentication information
user = 'Mark'  # the user in which the auth. token is given
website_url = '' #Your website url
pythonapp = ''  # paste here your auth. token
url = website_url +'/wp-json/wp/v2'  # the url of the wp access location

# header Generating
token = base64.standard_b64encode((user + ':' + pythonapp).encode('utf-8')) # we have to encode the usr and pw
headers = {'Authorization': 'Basic ' + token.decode('utf-8')}

# Unsplash
unsplash_api = ''  # https://unsplash.com/developers

def unsplash_image_operation_un(command):
    if not os.path.exists('img'):
        os.makedirs('img')
    try:
        pu = PyUnsplash(api_key=unsplash_api)
        photos = pu.photos(type_='random', count=1, featured=True, query=command)
        [photo] = photos.entries
        headers_fox = {
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36"}
        response = requests.get(photo.link_download, stream=True, headers=headers_fox)
        local_file = open('img/' + command + '.jpg', 'wb')
        response.raw.decode_content = True
        shutil.copyfileobj(response.raw, local_file)
        im = Image.open('img/' + command + '.jpg')
        resized_im = im.resize((round(im.size[0] * 0.5), round(im.size[1] * 0.5)))
        resized_im.save('img/' + command + '.jpg')
    except:
        pass


# Pixabay
pixabay_api = ""  # https://pixabay.com/api/docs/


def pixabay_image_operation(command):
    if not os.path.exists('img'):
        os.makedirs('img')
    try:
        image_list = requests.get(
            f'https://pixabay.com/api/?key={pixabay_api}&q={command.replace(" ", "+")}&image_type=photo&pretty=true')
        img_soup = image_list.json()['hits']
        img_list = []
        for x in img_soup:
            img_list.append(x['webformatURL'])
        if len(img_list) > 5:
            img_choice = choice([0, 1, 2, 3, 4, 5])
        else:
            img_choice = 0
        headers_fox = {
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36"}
        response = requests.get(img_list[img_choice], stream=True, headers=headers_fox)
        local_file = open('img/' + command + '.jpg', 'wb')
        response.raw.decode_content = True
        shutil.copyfileobj(response.raw, local_file)
        im = Image.open('img/' + command + '.jpg')
        resized_im = im.resize((round(im.size[0] * 0.5), round(im.size[1] * 0.5)))
        resized_im.save('img/' + command + '.jpg')
    except:
        pass


# Bing
def bing_image_operation(command):
    try:
        os.mkdir('img')
    except FileExistsError:
        pass
    try:
        downloader.download(command, limit=1, output_dir='img', filter='.jpg')
        try:
            im = Image.open('img/' + command + '/Image_1.jpg')
        except:
            try:
                im = Image.open('img/' + command + '/Image_1.png')
            except:
                im = Image.open('img/' + command + '/Image_1.JPEG')

        resized_im = im.resize((round(im.size[0] * 0.8), round(im.size[1] * 0.8)))
        resized_im.save('img/' + command + '.jpg')
    except:
        pass


# pexels
pexels_api = ""  # https://www.pexels.com/api/


def pexels_image_operation(command):
    if not os.path.exists('img'):
        os.makedirs('img')
    try:
        api = API(pexels_api)
        api.search(command, page=1, results_per_page=1)
        photos = api.get_entries()
        photo_list = list()
        for photo in photos:
            photo = photo.original
            photo_list.append(photo)
        if len(photo_list) > 0:
            headers_fox = {
                "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36"}
            response = requests.get(photo_list[0], stream=True, headers=headers_fox)
            local_file = open('img/' + command + '.jpg', 'wb')
            response.raw.decode_content = True
            shutil.copyfileobj(response.raw, local_file)
            im = Image.open('img/' + command + '.jpg')
            resized_im = im.resize((round(im.size[0] * 0.5), round(im.size[1] * 0.5)))
            resized_im.save('img/' + command + '.jpg')
    except:
        pass


# Body Image
def body_img(command):
    bing_image_operation(command)  # Change here, which option you want
    try:
        media = {'file': open('img/' + command + '.jpg', 'rb')}
        image = requests.post(json_url + '/media', headers=headers, files=media)
        image_title = command.replace('-', ' ').split('.')[0]
        post_id = str(json.loads(image.content.decode('utf-8'))['id'])
        source = json.loads(image.content.decode('utf-8'))['guid']['rendered']
        img_part1 = '<!-- wp:image {"align":"center","id":' + post_id + ',"sizeSlug":"full","linkDestination":"none"} -->'
        img_part2 = '<div class="wp-block-image"><figure class="aligncenter size-full"><img src="' + source + '" alt="' + image_title + '" title="' + image_title + '" class="wp-image-' + post_id + '"/></figure></div>'
        img_part3 = '<!-- /wp:image -->'
        image_wp = img_part1+img_part2+img_part3
        return image_wp
    except:
        image_wp = ''
        return image_wp


# Feature image
def feature_image(command):
    bing_image_operation(command)
    try:
        media = {'file': open('img/' + command + '.jpg', 'rb')}
        image = requests.post(json_url + '/media', headers=headers, files=media)
        image_wp = str(json.loads(image.content.decode('utf-8'))['id'])
        return image_wp
    except:
        image_wp = 0



def text_render(command):
  openai.api_key = ''
  response = openai.Completion.create(model="text-davinci-002",prompt=command,temperature=0.7,max_tokens=1000,top_p=1,frequency_penalty=0,presence_penalty=0)
  return response["choices"][0]["text"].strip()
def text_formating(text):
    text = text.replace('.','.---').split('---')
    retun_text1 = '<!-- wp:paragraph --><p>' + ''.join(text[0:2]) + '</p><!-- /wp:paragraph -->'
    retun_text2 = '<!-- wp:paragraph --><p>' + ''.join(text[2:4]) + '</p><!-- /wp:paragraph -->'
    retun_text3 = '<!-- wp:paragraph --><p>' + ''.join(text[4:]) + '</p><!-- /wp:paragraph -->'
    return retun_text1+retun_text2+retun_text3
with open('keywords.txt', 'r+') as file:
  read_line = file.readlines()
  for keyword in read_line:
    final_outline = []
    outline = text_render(f'Write a killer blog outline for the following request from a customer.\n\nREQUEST:{keyword}\n\nBrainstorm a list of sections for this blog post. The outline should meet the customer\'s request and each section should be highly descriptive.\n\nSECTIONS:\n\n1.')
    improve_outline = text_render(f'I brainstormed the following list of sections of a blog based on the customer\'s request. I need to brainstorm to see if there are any improvements I can make to this outline.\n\nREQUEST:{keyword}\n\nOUTLINE:\n{outline}\n\nBrainstorm some possible improvements:\n\n1.')
    update_outline = improve_outline.splitlines()
    for x in update_outline:
      if len(x) > 0 and "Introduction" not in x and "Conclusion" not in x:
        final_outline.append(x.replace('1.','').replace('2.','').replace('3.','').replace('4.','').replace('5.','').replace('6.','').replace('7.','').replace('8.','').replace('9.','').replace('10.','').strip())
    post_intro = '<!-- wp:paragraph --><p>'+text_render(f'Write high blog introduction, Topic:{keyword}:')+'</p><!-- /wp:paragraph -->'
    body = post_intro + body_img(keyword)
    for x in final_outline:
      heading = f'<!-- wp:heading --><h2>{x}</h2><!-- /wp:heading -->' + text_formating(text_render(f'"""\nBlog Section Title: {x}, Main Keyword: {keyword}\n"""\nWrite this blog section into a details professional para, witty and clever explanation:'))
      body += heading

    #Wordpress Posting information
    wp_title = keyword # Your Post Title
    content = body # Your Post content here
    slug = keyword.replace(' ','-') #Your Post URL

    featured_img = feature_image(keyword)

    post = {'title': wp_title,
            'slug': slug,
            'status': 'draft',
            'content': content,
            'categories':'1',
            'author': '1',
            'format': 'standard',
            'featured_media':featured_img
            }
    r = requests.post(url + '/posts', headers=headers, json=post)
    if r.status_code == 201:
      print(website_url +'/'+ slug + ' Has Been Posted')
    else:
      print('An error has happened There')
